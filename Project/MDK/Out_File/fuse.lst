C251 COMPILER V5.60.0,  fuse                                                               29/05/25  00:08:26  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE fuse
OBJECT MODULE PLACED IN .\Out_File\fuse.obj
COMPILER INVOKED BY: d:\Keil_v5\C251\BIN\C251.EXE ..\USER\src\fuse.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(5,SPEED) BROW
                    -SE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\US
                    -ER\inc;..\USER\src;..\..\vofa+) DEBUG PRINT(.\Out_File\fuse.lst) OBJECT(.\Out_File\fuse.obj) 

stmt  level    source

    1          #include "fuse.h"
    2          #include "math.h"
    3          #include "vofa.h"
    4          
    5          PID SpeedPID = {0};
    6          PID L_SpeedPID = {0};
    7          PID R_SpeedPID = {0};
    8          PID TurnPID = {0};
    9          
   10          int16 GORY_Z = 0;
   11          uint8 outline_stop = 0;
   12          float temp_left = 0;
   13          float temp_right = 0;
   14          /****************************PID参数初始化**************************************
   15          函数：  void PID_int(void)
   16          参数：  void
   17          说明：  PID每个环参数初始化
   18          返回值：void
   19          ********************************************************************************/
   20          void PID_int(void)
   21          {
   22   1          L_SpeedPID.Kp = 2000; // 左轮速度环PID参数
   23   1          L_SpeedPID.Ki = 0;
   24   1          L_SpeedPID.Kd = 0;
   25   1      
   26   1          R_SpeedPID.Kp = 2000; // 右速度环PID参数
   27   1          R_SpeedPID.Ki = 0;
   28   1          R_SpeedPID.Kd = 0;
   29   1      
   30   1          TurnPID.Kp = 15;
   31   1          TurnPID.Ki = 0;
   32   1          TurnPID.Kd = 5;
   33   1      
   34   1          TurnPID.K_gory = 0;
   35   1      }
   36          
   37          static TASK_COMPONENTS TaskComps[] =
   38              {
   39                  {0, 1, 1, Motor_output_control}, // 角速度内环和D车速度环2ms
   40                                                   //    {0, 2, 2, Trailing_control},           //转向外环10ms
   41                                                   //    {0, 4, 4, Speed_control},              //C车速度环20ms
   42          };
   43          /**************************************************************************************
   44           * FunctionName   : TaskRemarks()
   45           * Description    : 任务标志处理
   46           * EntryParameter : None
   47           * ReturnValue    : None
   48           * attention      : ***在定时器中断中调用此函数即可***
   49           **************************************************************************************/
   50          void TaskRemarks(void)
   51          {
   52   1          uint8 i;
   53   1          for (i = 0; i < TASKS_MAX; i++) // 逐个任务时间处理
   54   1          {
   55   2              if (TaskComps[i].Timer) // 时间不为0
   56   2              {
   57   3                  TaskComps[i].Timer--;        // 减去一个节拍
C251 COMPILER V5.60.0,  fuse                                                               29/05/25  00:08:26  PAGE 2   

   58   3                  if (TaskComps[i].Timer == 0) // 时间减完了
   59   3                  {
   60   4                      TaskComps[i].Timer = TaskComps[i].ItvTime; // 恢复计时器值，从新下一次
   61   4                      TaskComps[i].Run = 1;                      // 任务可以运行
   62   4                  }
   63   3              }
   64   2          }
   65   1      }
   66          
   67          /**************************************************************************************
   68           * FunctionName   : TaskProcess()
   69           * Description    : 任务处理|判断什么时候该执行那一个任务
   70           * EntryParameter : None
   71           * ReturnValue    : None
   72           * * attention      : ***放在mian的while(1)即可***
   73           **************************************************************************************/
   74          void TaskProcess(void)
   75          {
   76   1          uint8 i;
   77   1          for (i = 0; i < TASKS_MAX; i++) // 逐个任务时间处理
   78   1          {
   79   2              if (TaskComps[i].Run) // 时间不为0
   80   2              {
   81   3                  TaskComps[i].TaskHook(); // 运行任务
   82   3                  TaskComps[i].Run = 0;    // 标志清0
   83   3              }
   84   2          }
   85   1      }
   86          
   87          /***************************************************************************************
   88          函数名：int16 range_protect(int16 duty, int16 min, int16 max)
   89          功  能：限幅保护
   90          参  数：
   91          返回值：duty
   92          **************************************************************************************/
   93          float range_protect(float duty, float min, float max) // 限幅保护
   94          {
   95   1          if (duty >= max)
   96   1          {
   97   2              return max;
   98   2          }
   99   1          if (duty <= min)
  100   1          {
  101   2              return min;
  102   2          }
  103   1          else
  104   1          {
  105   2              return duty;
  106   2          }
  107   1      }
  108          
  109          /****************************角速度内环和D车速度环**************************************
  110          函数：  void Motor_output_control()
  111          参数：  void
  112          说明：  角速度内环和D车速度环(D车/三轮车才会用)
  113          返回值：void
  114          ***************************************************************************************/
  115          void Motor_output_control()
  116          {
  117   1      
  118   1          icm20602_get_gyro();
  119   1          GORY_Z = icm20602_gyro_transition(icm20602_gyro_z); // 单位为°/s
  120   1          speed_measure();                                    // 编码器测量
  121   1          Get_deviation();                                    // 电磁采集并获取赛道偏差
  122   1      
  123   1          ADC_PWM = PID_Turn_DT(&TurnPID, Current_Dir, 0);
C251 COMPILER V5.60.0,  fuse                                                               29/05/25  00:08:26  PAGE 3   

  124   1      
  125   1          if ((Left_Adc < 3 && Right_Adc < 3 && Left_Shu_Adc < 3 && Right_Shu_Adc < 3) || outline_stop == 1)
  126   1          {
  127   2              outline_stop = 1;
  128   2              go_motor(0, 0); // 动力输出
  129   2          }
  130   1          else
  131   1          {
  132   2              if (ADC_PWM >= 0)
  133   2              {
  134   3                  temp_left = aim_speed + 0.6f * ADC_PWM;
  135   3                  temp_right = aim_speed - 1.2f * ADC_PWM;
  136   3              }
  137   2              else
  138   2              {
  139   3                  temp_left = aim_speed + 1.2f * ADC_PWM;
  140   3                  temp_right = aim_speed - 0.6f * ADC_PWM;
  141   3              }
  142   2              Speed_pwm_left += IncPIDCalc(&L_SpeedPID, temp_left, left_real_speed, 0);
  143   2              Speed_pwm_right += IncPIDCalc(&R_SpeedPID, temp_right, right_real_speed, 0);
  144   2              go_motor(Speed_pwm_left, Speed_pwm_right); // 动力输出
  145   2          }
  146   1      }
  147          
  148          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       513     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       128          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       164     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
